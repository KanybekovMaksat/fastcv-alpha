import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType, BorderStyle, WidthType, Table, TableRow, TableCell } from 'docx';
import { saveAs } from 'file-saver';
import { UserProfile } from '../types';

export const exportToPDF = async (elementId: string, filename: string = 'resume.pdf') => {
  try {
    const element = document.getElementById(elementId);
    if (!element) {
      throw new Error('–≠–ª–µ–º–µ–Ω—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –°–æ–∑–¥–∞–µ–º canvas –∏–∑ HTML —ç–ª–µ–º–µ–Ω—Ç–∞
    const canvas = await html2canvas(element, {
      scale: 2,
      useCORS: true,
      allowTaint: true,
      backgroundColor: '#ffffff',
      width: element.scrollWidth,
      height: element.scrollHeight
    });

    // –°–æ–∑–¥–∞–µ–º PDF
    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    });

    const imgWidth = 210; // A4 width in mm
    const pageHeight = 297; // A4 height in mm
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    let heightLeft = imgHeight;
    let position = 0;

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
    heightLeft -= pageHeight;

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    while (heightLeft >= 0) {
      position = heightLeft - imgHeight;
      pdf.addPage();
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    pdf.save(filename);
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ PDF:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF —Ñ–∞–π–ª');
  }
};

export const exportToWord = async (profile: UserProfile, templateId: string, filename: string = 'resume.docx') => {
  try {
    const doc = new Document({
      sections: [{
        properties: {},
        children: [
          // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–º–µ–Ω–µ–º
          new Paragraph({
            children: [
              new TextRun({
                text: profile.fullName,
                bold: true,
                size: 32,
                color: "156dcf"
              })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 200 }
          }),

          // –î–æ–ª–∂–Ω–æ—Å—Ç—å
          new Paragraph({
            children: [
              new TextRun({
                text: profile.position,
                size: 24,
                color: "666666"
              })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 400 }
          }),

          // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          new Paragraph({
            children: [
              new TextRun({
                text: `üìß ${profile.email}`,
                size: 20
              }),
              ...(profile.phone ? [
                new TextRun({
                  text: ` | üì± ${profile.phone}`,
                  size: 20
                })
              ] : []),
              ...(profile.location ? [
                new TextRun({
                  text: ` | üìç ${profile.location}`,
                  size: 20
                })
              ] : [])
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 400 }
          }),

          // –û —Å–µ–±–µ
          ...(profile.summary ? [
            new Paragraph({
              children: [
                new TextRun({
                  text: "–û –°–ï–ë–ï",
                  bold: true,
                  size: 24,
                  color: "156dcf"
                })
              ],
              heading: HeadingLevel.HEADING_2,
              spacing: { before: 400, after: 200 }
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: profile.summary,
                  size: 20
                })
              ],
              spacing: { after: 400 }
            })
          ] : []),

          // –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
          ...(profile.experience && profile.experience.length > 0 ? [
            new Paragraph({
              children: [
                new TextRun({
                  text: "–û–ü–´–¢ –†–ê–ë–û–¢–´",
                  bold: true,
                  size: 24,
                  color: "156dcf"
                })
              ],
              heading: HeadingLevel.HEADING_2,
              spacing: { before: 400, after: 200 }
            }),
            ...profile.experience.flatMap(exp => [
              new Paragraph({
                children: [
                  new TextRun({
                    text: exp.position,
                    bold: true,
                    size: 22
                  })
                ],
                spacing: { before: 200, after: 100 }
              }),
              new Paragraph({
                children: [
                  new TextRun({
                    text: `${exp.company} ‚Ä¢ ${exp.location}`,
                    size: 20,
                    color: "156dcf"
                  })
                ],
                spacing: { after: 100 }
              }),
              new Paragraph({
                children: [
                  new TextRun({
                    text: `${exp.startDate} - ${exp.current ? '–Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è' : exp.endDate}`,
                    size: 18,
                    color: "666666"
                  })
                ],
                spacing: { after: 200 }
              }),
              ...exp.description.map(desc => 
                new Paragraph({
                  children: [
                    new TextRun({
                      text: `‚Ä¢ ${desc}`,
                      size: 20
                    })
                  ],
                  spacing: { after: 100 }
                })
              )
            ])
          ] : []),

          // –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
          ...(profile.education && profile.education.length > 0 ? [
            new Paragraph({
              children: [
                new TextRun({
                  text: "–û–ë–†–ê–ó–û–í–ê–ù–ò–ï",
                  bold: true,
                  size: 24,
                  color: "156dcf"
                })
              ],
              heading: HeadingLevel.HEADING_2,
              spacing: { before: 400, after: 200 }
            }),
            ...profile.education.flatMap(edu => [
              new Paragraph({
                children: [
                  new TextRun({
                    text: `${edu.degree} - ${edu.field}`,
                    bold: true,
                    size: 22
                  })
                ],
                spacing: { before: 200, after: 100 }
              }),
              new Paragraph({
                children: [
                  new TextRun({
                    text: edu.institution,
                    size: 20,
                    color: "156dcf"
                  })
                ],
                spacing: { after: 100 }
              }),
              new Paragraph({
                children: [
                  new TextRun({
                    text: `${edu.startYear} - ${edu.endYear}`,
                    size: 18,
                    color: "666666"
                  }),
                  ...(edu.gpa ? [
                    new TextRun({
                      text: ` | –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: ${edu.gpa}`,
                      size: 18,
                      color: "666666"
                    })
                  ] : [])
                ],
                spacing: { after: 200 }
              })
            ])
          ] : []),

          // –ù–∞–≤—ã–∫–∏
          ...(profile.skills && profile.skills.length > 0 ? [
            new Paragraph({
              children: [
                new TextRun({
                  text: "–ù–ê–í–´–ö–ò",
                  bold: true,
                  size: 24,
                  color: "156dcf"
                })
              ],
              heading: HeadingLevel.HEADING_2,
              spacing: { before: 400, after: 200 }
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: profile.skills.map(skill => `${skill.name} (${skill.level})`).join(' ‚Ä¢ '),
                  size: 20
                })
              ],
              spacing: { after: 400 }
            })
          ] : []),

          // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
          ...((profile.linkedin || profile.github || profile.website) ? [
            new Paragraph({
              children: [
                new TextRun({
                  text: "–°–°–´–õ–ö–ò",
                  bold: true,
                  size: 24,
                  color: "156dcf"
                })
              ],
              heading: HeadingLevel.HEADING_2,
              spacing: { before: 400, after: 200 }
            }),
            new Paragraph({
              children: [
                ...(profile.linkedin ? [
                  new TextRun({
                    text: `LinkedIn: ${profile.linkedin}`,
                    size: 20
                  })
                ] : []),
                ...(profile.github ? [
                  new TextRun({
                    text: `${profile.linkedin ? ' | ' : ''}GitHub: ${profile.github}`,
                    size: 20
                  })
                ] : []),
                ...(profile.website ? [
                  new TextRun({
                    text: `${(profile.linkedin || profile.github) ? ' | ' : ''}Website: ${profile.website}`,
                    size: 20
                  })
                ] : [])
              ],
              spacing: { after: 400 }
            })
          ] : [])
        ]
      }]
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    const buffer = await Packer.toBuffer(doc);
    const blob = new Blob([buffer], { 
      type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' 
    });
    saveAs(blob, filename);
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Word:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Word —Ñ–∞–π–ª');
  }
};